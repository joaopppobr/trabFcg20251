"""
Gerador de modelo de asteroide simples
Este script cria um arquivo OBJ representando um asteroide irregular

Execute este script para gerar asteroid.obj na pasta atual
"""
import random
import math
import os

def generate_asteroid(filename, radius=1.0, irregularity=0.3, stacks=16, slices=16):
    """
    Gera um modelo de asteroide e salva como arquivo OBJ
    
    Args:
        filename: Nome do arquivo de saída
        radius: Raio base do asteroide
        irregularity: Fator de irregularidade (0-1)
        stacks: Número de divisões verticais
        slices: Número de divisões horizontais
    """
    # Gerar vértices
    vertices = []
    for i in range(stacks + 1):
        phi = math.pi * i / stacks
        for j in range(slices + 1):
            theta = 2 * math.pi * j / slices
            
            # Coordenadas esféricas para cartesianas
            x = radius * math.sin(phi) * math.cos(theta)
            y = radius * math.cos(phi)
            z = radius * math.sin(phi) * math.sin(theta)
            
            # Adicionar irregularidade baseada em ruído
            distortion = radius * irregularity * random.random()
            x += random.uniform(-distortion, distortion)
            y += random.uniform(-distortion, distortion)
            z += random.uniform(-distortion, distortion)
            
            vertices.append((x, y, z))
    
    # Gerar normais (aproximadas)
    normals = []
    for v in vertices:
        x, y, z = v
        length = math.sqrt(x*x + y*y + z*z)
        normals.append((x/length, y/length, z/length))
    
    # Gerar coordenadas de textura
    texcoords = []
    for i in range(stacks + 1):
        for j in range(slices + 1):
            s = j / slices
            t = i / stacks
            texcoords.append((s, t))
    
    # Gerar faces
    faces = []
    for i in range(stacks):
        for j in range(slices):
            # Índices dos vértices (iniciando em 1, formato OBJ)
            v1 = i * (slices + 1) + j + 1
            v2 = i * (slices + 1) + j + 2
            v3 = (i + 1) * (slices + 1) + j + 2
            v4 = (i + 1) * (slices + 1) + j + 1
            
            # Duas faces triangulares
            faces.append((v1, v2, v3))
            faces.append((v1, v3, v4))
    
    # Salvar como arquivo OBJ
    with open(filename, 'w') as f:
        f.write("# Asteroid model generated by asteroid_generator.py\n")
        f.write(f"# Parameters: radius={radius}, irregularity={irregularity}, stacks={stacks}, slices={slices}\n\n")
        
        # Escrever vértices
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        
        # Escrever normais
        for n in normals:
            f.write(f"vn {n[0]:.6f} {n[1]:.6f} {n[2]:.6f}\n")
        
        # Escrever coordenadas de textura
        for t in texcoords:
            f.write(f"vt {t[0]:.6f} {t[1]:.6f}\n")
        
        # Escrever faces
        for face in faces:
            # Formato OBJ: f v/vt/vn v/vt/vn v/vt/vn
            f.write(f"f {face[0]}/{face[0]}/{face[0]} {face[1]}/{face[1]}/{face[1]} {face[2]}/{face[2]}/{face[2]}\n")

    print(f"Modelo salvo como: {filename}")

if __name__ == "__main__":
    # Gerar um asteroide irregular
    generate_asteroid('asteroid.obj')
    print("Modelo de asteroide gerado com sucesso!")
    print(f"Salvo em: {os.path.abspath('asteroid.obj')}")
    input("Pressione Enter para sair...")
